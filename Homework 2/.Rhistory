ncol = 3,
nrow = 1,
widths = c(200,200,400)
)
g1 <- ggplot(data=movies, aes(x=audience_score)) + geom_histogram(bins=30, aes(fill = title_type), position = "identity", alpha = 0.7) + scale_color_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0")) + scale_fill_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0")) + theme(legend.position = "none")
g2 <- ggplot(data=movies, aes(x=critics_score)) + geom_histogram(bins=30, aes(fill = title_type), position = "identity", alpha = 0.7) + scale_color_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0")) + scale_fill_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0")) + theme(legend.position = "none")
g3 <- ggplot(data=movies, aes(x=imdb_rating)) + geom_histogram(bins=30, aes(fill = title_type), position = "identity", alpha = 0.7) + scale_color_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0")) + scale_fill_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0"))
ggarrange(
g1,
g2,
g3,
ncol = 3,
nrow = 1,
widths = c(200,200,400),
legend = c("Documentary", "Feature Film", "TV Movie")
)
g1 <- ggplot(data=movies, aes(x=audience_score)) + geom_histogram(bins=30, aes(fill = title_type), position = "identity", alpha = 0.7) + scale_color_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0")) + scale_fill_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0")) + theme(legend.position = "none")
g2 <- ggplot(data=movies, aes(x=critics_score)) + geom_histogram(bins=30, aes(fill = title_type), position = "identity", alpha = 0.7) + scale_color_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0")) + scale_fill_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0")) + theme(legend.position = "none")
g3 <- ggplot(data=movies, aes(x=imdb_rating)) + geom_histogram(bins=30, aes(fill = title_type), position = "identity", alpha = 0.7) + scale_color_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0")) + scale_fill_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0"))
ggarrange(
g1,
g2,
g3,
ncol = 3,
nrow = 1,
widths = c(200,200,400)
)
g1 <- (data=movies, aes(x=audience_score)) + geom_density(aes(color = title_type), kernel = "gaussian")
g1 <- ggplot(data=movies, aes(x=audience_score)) + geom_density(aes(color = title_type), kernel = "gaussian")
g2 <- ggplot(data=movies, aes(x=critics_score)) + geom_density(aes(color = title_type), kernel = "gaussian")
g3 <- ggplot(data=movies, aes(x=imdb_rating)) + geom_density(aes(color = title_type), kernel = "gaussian")
ggarrange(
g1,
g2,
g3,
ncol = 3,
nrow = 1,
widths = c(200,200,400)
)
g1 <- ggplot(data=movies, aes(x=audience_score)) + geom_histogram(bins=30, aes(fill = title_type), position = "identity", alpha = 0.7) + scale_color_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0")) + scale_fill_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0")) + theme(legend.position = "none")
g2 <- ggplot(data=movies, aes(x=critics_score)) + geom_histogram(bins=30, aes(fill = title_type), position = "identity", alpha = 0.7) + scale_color_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0")) + scale_fill_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0")) + theme(legend.position = "none")
g3 <- ggplot(data=movies, aes(x=imdb_rating)) + geom_histogram(bins=30, aes(fill = title_type), position = "identity", alpha = 0.7) + scale_color_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0")) + scale_fill_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0"))
ggarrange(
g1,
g2,
g3,
ncol = 3,
nrow = 1,
widths = c(200,200,400),
legend = c("1", "2", "3")
)
g1 <- ggplot(data=movies, aes(x=audience_score)) + geom_histogram(bins=30, aes(fill = title_type), position = "identity", alpha = 0.7) + scale_color_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0")) + scale_fill_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0")) + theme(legend.position = "none")
g2 <- ggplot(data=movies, aes(x=critics_score)) + geom_histogram(bins=30, aes(fill = title_type), position = "identity", alpha = 0.7) + scale_color_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0")) + scale_fill_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0")) + theme(legend.position = "none")
g3 <- ggplot(data=movies, aes(x=imdb_rating)) + geom_histogram(bins=30, aes(fill = title_type), position = "identity", alpha = 0.7) + scale_color_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0")) + scale_fill_manual(values = c("#00AFBB", "#E7B800", "#0AFBB0"))
ggarrange(
g1,
g2,
g3,
ncol = 3,
nrow = 1,
widths = c(200,200,400),
labels  = c("1", "2", "3")
)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
flights <- nycflights13::flights
flights %>% group_by(month) %>% dplyr::summarize(Mean = mean(arr_delay, na.rm=TRUE))
# Which month had the greatest average departure delay?
flights %>% group_by(month) %>% summarize(Mean = mean(arr_delay, na.rm=TRUE)) %>% filter(Mean == max(Mean)) %>% select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(group_by(flights, month))
q()
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
flights <- nycflights13::flights
flights %>% group_by(month) %>% dplyr::summarize(Mean = mean(arr_delay, na.rm=TRUE))
# Which month had the greatest average departure delay?
flights %>% group_by(month) %>% summarize(Mean = mean(arr_delay, na.rm=TRUE)) %>% filter(Mean == max(Mean)) %>% select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
flights %>% group_by(month) %>% summarize(Mean = mean(arr_delay, na.rm=TRUE))
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(flights %>% group_by(month) %>% summarize(Mean = mean(arr_delay, na.rm=TRUE)))
# Which month had the greatest average departure delay?
flights %>% group_by(month) %>% summarize(mean_delay = mean(arr_delay, na.rm=TRUE)) %>% filter(mean_delay == max(mean_delay)) %>% select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(flights %>% group_by(month) %>% summarize(Mean = mean(arr_delay, na.rm=TRUE)))
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(flights %>% group_by(month) %>% summarize(mean_delay = mean(arr_delay, na.rm=TRUE)))
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
flights %>% group_by(dest) %>% summarize(mean_delay = mean(arr_delay, na.rm=TRUE))
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
flights %>% group_by(dest) %>% summarize(mean_delay = mean(arr_delay, na.rm=TRUE)) %>% order_by(mean_delay)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
flights %>% group_by(dest) %>% summarize(mean_delay = mean(arr_delay, na.rm=TRUE)) %>% order_by(mean_delay)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
flights %>% group_by(dest) %>% summarize(mean_delay = mean(arr_delay, na.rm=TRUE)) %>% desc(mean_delay)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
flights %>% group_by(dest) %>% summarize(mean_delay = mean(arr_delay, na.rm=TRUE)) %>% arrange(mean_delay)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
flights %>% group_by(dest) %>% summarize(mean_delay = mean(arr_delay, na.rm=TRUE)) %>% arrange(mean_delay) %>% head()
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
flights %>% group_by(dest) %>% summarize(mean_delay = mean(arr_delay, na.rm=TRUE)) %>% arrange(desc(mean_delay)) %>% head()
select(airlines, dest)
select(airlines)
head(airlines)
left_join(airports, c('CAE', 'LEX'))
group_dest %>% left_join(airports, c("dest", "foo"))
group_dest %>% left_join(airports)
group_dest %>% left_join(airports, by = c("dest"="faa"))
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
group_dest <- flights %>% group_by(dest) %>% summarize(mean_delay = mean(arr_delay, na.rm=TRUE)) %>% arrange(desc(mean_delay))
head(group_dest)
# You can look up these airports in the `airports` data frame!
airports <- nycflights13::airports
group_dest %>% left_join(airports, by = c("dest"="faa"))
# Which city was flown to with the highest average speed?
View(flights)
flights %>% group_by(dest) %>% summarize(mean_speed = mean(air_time/distance), na.rm=TRUE)
flights %>% group_by(dest) %>% summarize(mean_speed = mean(air_time/distance, na.rm=TRUE)
flights %>% group_by(dest) %>% summarize(mean_speed = mean(air_time/distance, na.rm=TRUE))
flights %>% group_by(dest) %>% summarize(mean_speed = mean(air_time/distance, na.rm=TRUE))
flights %>% group_by(dest) %>% summarize(mean_speed = mean(air_time/distance, na.rm=TRUE)) %>% arrange(desc(mean_speed))
flights %>% group_by(dest) %>% summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>% arrange(desc(mean_speed))
flights %>% group_by(dest) %>% summarize(mean_speed = mean(distance/air_time, na.rm=TRUE))
%>% arrange(desc(mean_speed))
flights %>% group_by(dest) %>% summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>% arrange(desc(mean_speed))
flights %>% group_by(dest) %>% summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>% arrange(desc(mean_speed)) %>% filter(mean_speed > 8)
flights %>% group_by(dest) %>% summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>% filter(mean_speed > 8) %>% arrange(desc(mean_speed))
flights %>% group_by(dest) %>% summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed > 8) %>% arrange(desc(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed > 8) %>%
arrange(desc(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed > 8) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa"))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed > 8) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa")) %>%
select(name)
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed > 8) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"=="faa")) %>%
select(name)
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed > 8) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa")) %>%
select(name)
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed > 8) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa"))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed > 8) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa")) %>%
select(name)
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed > 8) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa"))
airports[airports$faa]
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa"))
group_dest %>%
left_join(airports, by = c("dest"="faa"))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa"))
airports[airports$faa]
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa")) %>%
filter(mean_speed == max(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa")) %>%
filter(mean_speed == max(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa")) %>%
filter(mean_speed == min(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
filter(mean_speed == max(mean_speed)) %>%
left_join(airports, by = c("dest"="faa"))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
filter(mean_speed == max(mean_speed)) %>%
left_join(airports, by = c("dest"="faa"))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
filter(mean_speed == max(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
filter(mean_speed == min(mean_speed)) %>%
left_join(airports, by = c("dest"="faa"))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
filter(mean_speed == min(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
filter(mean_speed == max(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
filter(mean_speed == max(mean_speed))
# Which month had the greatest average departure delay?
dep_delay_by_month
# Which month had the greatest average departure delay?
dep_delay_by_month %>%
filter(mean_delay == max(mean_delay)) %>%
select(month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
dplyr::summarize(Mean = mean(arr_delay, na.rm=TRUE))
# Which month had the greatest average departure delay?
dep_delay_by_month %>%
filter(mean_delay == max(mean_delay)) %>%
select(month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
dplyr::summarize(mean_delay = mean(arr_delay, na.rm=TRUE))
# Which month had the greatest average departure delay?
dep_delay_by_month %>%
filter(mean_delay == max(mean_delay)) %>%
select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
group_dest <- dep_delay_by_month %>%
arrange(desc(mean_delay))
head(group_dest)
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed == max(mean_speed)) %>%
left_join(airports, by = c("dest"="faa"))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed == max(mean_speed))
%>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa"))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed = max(mean_speed)) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa"))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed = max(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed == max(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE))
# Which month had the greatest average departure delay?
dep_delay_by_month
dep_delay_by_month %>%
filter(mean_delay == max(mean_delay)) %>%
select(month)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
flights <- nycflights13::flights
dep_delay_by_month <- flights %>%
group_by(month) %>%
dplyr::summarize(mean_delay = mean(arr_delay, na.rm=TRUE))
# Which month had the greatest average departure delay?
dep_delay_by_month
dep_delay_by_month %>%
filter(mean_delay == max(mean_delay)) %>%
select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
group_dest <- dep_delay_by_month %>%
arrange(desc(mean_delay))
head(group_dest)
# You can look up these airports in the `airports` data frame!
airports <- nycflights13::airports
group_dest %>%
left_join(airports, by = c("dest"="faa"))
# Which city was flown to with the highest average speed?
View(flights)
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed == max(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed == max(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed > max(mean_speed)-1)
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed == max(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed == max(mean_speed, na.rm = T))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed == max(mean_speed, na.rm = TRUE))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed == max(mean_speed, na.rm = TRUE)) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa"))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed == max(mean_speed, na.rm = TRUE)) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa")) %>%
select(name)
read.table(file = 'data/hlth_ehis_al1i.tsv', sep = '\t', header = TRUE)
ls
files()
list.files()
list.files()
setwd("D:/Universidad/EIT/UPM/Primer semestre/Statistical Data Analysis/SDA_HW_2019/Homework 2")
diamonds <- read.delim("HW-diamonds.txt", header = FALSE, sep = "\t", dec = ".")
head(diamonds)
diamonds <- read.delim("HW-diamonds.txt", header = FALSE, sep = " ", dec = ".")
head(diamonds)
diamonds <- read.delim("HW-diamonds.txt", header = FALSE, sep = "", dec = ".")
head(diamonds)
colnames(diamonds)
colnames(diamonds)[1]
colnames(diamonds)[1] <- "Purity"
head(diamonds)
colnames(diamonds) <- ["Purity", "V2", "V3", "V4", "V5"]
colnames(diamonds) <- ("Purity", "V2", "V3", "V4", "V5")
colnames(diamonds) <- c("Purity", "V2", "V3", "V4", "V5")
head(diamonds)
colnames(diamonds) <- c("Purity", "Purity", "V3", "V4", "V5")
head(diamonds)
colnames(diamonds) <- c("Caratage", "Purity", "Clarity", "Certificate", "Price")
head(diamonds)
summary(diamonds)
factor(diamonds$Purity, levels=c("D", "E", "F", "G", "H", "I"))
diamonds$Purity <- factor(diamonds$Purity, levels=c("D", "E", "F", "G", "H", "I"))
summary(diamonds)
diamonds$Purity <- factor(diamonds$Purity, levels=c("VS2", "VS1", "VVS2", "VVS1", "IF"))
diamonds$Purity <- factor(diamonds$Purity, levels=c("VS2", "VS1", "VVS2", "VVS1", "IF"))
colnames(diamonds) <- c("Caratage", "Purity", "Clarity", "Certificate", "Price")
diamonds$Purity <- factor(diamonds$Purity, levels=c("D", "E", "F", "G", "H", "I"))
diamonds$Purity <- factor(diamonds$Purity, levels=c("VS2", "VS1", "VVS2", "VVS1", "IF"))
diamonds$Purity <- factor(diamonds$Purity, levels=c("VS2", "VS1", "VVS2", "VVS1", "IF"))
colnames(diamonds) <- c("Caratage", "Purity", "Clarity", "Certificate", "Price")
diamonds$Purity <- factor(diamonds$Purity, levels=c("D", "E", "F", "G", "H", "I"))
diamonds$Purity <- factor(diamonds$Purity, levels=c("VS2", "VS1", "VVS2", "VVS1", "IF"))
summary(diamonds)
diamonds <- read.delim("HW-diamonds.txt", header = FALSE, sep = "", dec = ".")
head(diamonds)
colnames(diamonds) <- c("Caratage", "Purity", "Clarity", "Certificate", "Price")
diamonds$Purity <- factor(diamonds$Purity, levels=c("D", "E", "F", "G", "H", "I"))
diamonds$Purity <- factor(diamonds$Purity, levels=c("VS2", "VS1", "VVS2", "VVS1", "IF"))
summary(diamonds)
diamonds <- read.delim("HW-diamonds.txt", header = FALSE, sep = "", dec = ".")
head(diamonds)
summary(diamonds)
diamonds <- read.delim("HW-diamonds.txt", header = FALSE, sep = "", dec = ".")
head(diamonds)
colnames(diamonds) <- c("Caratage", "Purity", "Clarity", "Certificate", "Price")
diamonds$Purity <- factor(diamonds$Purity, levels=c("D", "E", "F", "G", "H", "I"))
diamonds$Clarity <- factor(diamonds$Clarity, levels=c("VS2", "VS1", "VVS2", "VVS1", "IF"))
summary(diamonds)
library(ggplot2)
diamonds <- read.delim("HW-diamonds.txt", header = FALSE, sep = "", dec = ".")
head(diamonds)
colnames(diamonds) <- c("caratage", "purity", "clarity", "certificate", "price")
diamonds$purity <- factor(diamonds$purity, levels=c("D", "E", "F", "G", "H", "I"))
diamonds$clarity <- factor(diamonds$clarity, levels=c("VS2", "VS1", "VVS2", "VVS1", "IF"))
summary(diamonds)
library(ggplot2)
ggplot(data=diamonds, aes(price, caratage)) +
geom_point(aes(color=cyl))
ggplot(data=diamonds, aes(price, caratage)) +
geom_point()
ggplot(data=diamonds, aes(price, caratage)) +
geom_point()
ggplot(data=diamonds, aes(log(price), caratage)) +
geom_point()
