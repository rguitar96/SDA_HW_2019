source('D:/Universidad/EIT/UPM/Primer semestre/Statistical Data Analysis/Labs/Lab 1/Lab#1a.R')
source('D:/Universidad/EIT/UPM/Primer semestre/Statistical Data Analysis/Labs/Lab 1/Lab#1a.R')
source('D:/Universidad/EIT/UPM/Primer semestre/Statistical Data Analysis/Labs/Lab 1/Lab#1a.R')
source('D:/Universidad/EIT/UPM/Primer semestre/Statistical Data Analysis/Labs/Lab 1/Lab#1a.R')
source('D:/Universidad/EIT/UPM/Primer semestre/Statistical Data Analysis/Labs/Lab 1/Lab#1a.R')
source('D:/Universidad/EIT/UPM/Primer semestre/Statistical Data Analysis/Labs/Lab 1/Lab#1a.R')
source('D:/Universidad/EIT/UPM/Primer semestre/Statistical Data Analysis/Labs/Lab 1/Lab#1a.R')
source('D:/Universidad/EIT/UPM/Primer semestre/Statistical Data Analysis/Labs/Lab 1/Lab#1a.R')
## Import data set from the web
url="http://lib.stat.cmu.edu/datasets/1993.expo/cereal"
## Import data set from the web
url="http://lib.stat.cmu.edu/datasets/1993.expo/cereal"
cereals <- read.table(url, header=FALSE, as.is=TRUE, na.strings="-1")
library(moments)
library(tidyverse)
library(car)
library(dplyr)
# or from local file
#cereals <- read.table("cereal.txt", header=TRUE, as.is=TRUE, na.strings="-1")
names(cereals) <- c('name','mfr','type','calories','protein','fat','sodium','fiber','carbo',
'sugars','shelf','potass','vitamins','weight','cups')
cereals
cereals
head(cereals)
#checking for missing data and its number
sum(is.na(cereals))
mydara$v15
cerealsa$v15
cereals$v15
cereals$v4
cereals$v1
cereals$name
head(cereals)
cereals$cups[data$cups==NA]
cereals$cups[data$cups==0.33]
cereals$cups[cereals$cups==0.33]
cereals$cups[cereals$cups==NA]
head(cereals)
cereals[!complete.cases(cereals),]
cereals$shelf
# Creating a factor
cereals$shelf <- factor(cereals$shelf, levels=1:3, ordered=TRUE)
cereals$shelf
cereals$shelf
table(cereals$shelf)
cereals$shelfC <- recode(cereals$shelf, " 1='low'; 2='medium'; 3='high' ")
table(cereals$shelf)
# Basic statistical summary of the data set
summary(cereals)
table(cereals$shelfC)
## Skewness and kurtosis, need package "moments" to be loaded.
apply(cereals[,7:10],2, kurtosis)
#deleting missing values, creating new data frame cereal. There exist imputation methods, but we're not studying them.
cereals=na.omit(cereals)
str(cereals)
# Creating a factor
cereals$shelf <- factor(cereals$shelf, levels=1:3, ordered=TRUE)
cereals$shelf
table(cereals$shelf)
cereals$shelfC <- recode(cereals$shelf, " 1='low'; 2='medium'; 3='high' ")
# Basic statistical summary of the data set
summary(cereals)
## Skewness and kurtosis, need package "moments" to be loaded.
apply(cereals[,7:10],2, kurtosis)
# defining a function to calculate coefficient of variation:
cv=function(x){
sd=sqrt(var(x))
mu=abs(mean(x))
sd/mu}
# using it
apply(cereals[,7:10],2, cv)
#other function
cereal_stats=data.frame(
cv=apply(cereals[,c(4:10,12:15)],2,cv),
kurtosis=apply(cereals[,c(4:10,12:15)],2,kurtosis),
skew=apply(cereals[,c(4:10,12:15)],2,skewness))
#using it
print(cereal_stats, gap=3)
# Variable mfr=manufacturer, we may want to know what is the mean content of, say, sugars in
# the different manufacturers. Install package tidyverse
# The five main data manipulation 'verbs' in
# dplyr are: select(), ## filter(), arrange(), mutate(), and summarise().
glimpse(cereals)
filter1=filter(cereals, shelf==3)
head(filter1)
# filtering using more than one variable and multiple criteria
filter2=filter(cereals,shelf==3,sodium > 100, sodium <=130)
head(filter2)
# Arrange reorders rows
head(arrange(cereals,sugars))
# If more than one variable is included, they are use to break the ties, if any.
head(arrange(cereals,sugars, protein))
head(select(cereals, shelf, sugars))
head(select(cereals, starts_with("p")))
# mutate() adds new columns that are functions of existing ones:
mutate(cereals, logC=log(calories) )
# summarise and group_by
summarise(group_by(cereals,mfr), mean(sugars), sd(sugars))
# sample_n and sample_frac: select random rows from the dataset
sample_n(cereals, 10)
sample_frac(cereals, 0.1)
#or using the piping option, chaining operations
cereals %>% group_by(mfr) %>% summarise(N=n(),avg=mean(sugars), s=sd(sugars)) %>%arrange(avg)
#exploring relationships between shelf and sugars, fiber and calories
cereals %>% group_by(shelf) %>% summarise(N=n(),avg=mean(sugars), s=sd(sugars)) %>%arrange(avg)
cereals %>% group_by(shelf) %>% summarise(N=n(),avg=mean(fiber), s=sd(fiber)) %>%arrange(avg)
cereals %>% group_by(shelf) %>% summarise(N=n(),avg=mean(calories), s=sd(calories)) %>%arrange(avg)
#using two variables to split up the results for variable sugars
cereals %>% group_by(mfr, shelf) %>% summarise(N=n(),avg=mean(sugars), s=sd(sugars))
cereals %>% group_by(mfr, shelf) %>% summarise(N=n(),avg=mean(sugars), s=sd(sugars))%>%filter(N>1)
df1=cereals %>% group_by(shelf) %>% summarise(N=n(),avg=mean(sugars), s=sd(sugars),se=s/sqrt(N),cil=avg-qt(0.975,N-1)*se,ciu=avg+qt(0.975,N-1)*se)
# Basic plot: relationship between fiber and calories
plot(cereals$fiber, cereals$calories)
# Basic plot: relationship between fat and calories
plot(cereals$fat, cereals$calories)
plot(jitter(cereals$fat), jitter(cereals$calories))
# Basic plot: relationship between fiber and calories
plot(cereals$fiber, cereals$calories)
# Basic plot: relationship between fat and calories
plot(cereals$fat, cereals$calories)
plot(jitter(cereals$fat), jitter(cereals$calories))
## Import data set from the web
url="http://lib.stat.cmu.edu/datasets/1993.expo/cereal"
cereals <- read.table(url, header=FALSE, as.is=TRUE, na.strings="-1")
# data cereals, import, change column names, remove NA's, define shelf as a factor
#cereals <- read.table("cereal.txt", header=FALSE, as.is=TRUE, na.strings="-1")
names(cereals) <- c('name','mfr','type','calories','protein','fat','sodium','fiber','carbo',
'sugars','shelf','potass','vitamins','weight','cups')
cereals=na.omit(cereals)
cereals$shelf <- factor(cereals$shelf, levels=1:3)
# We also create a factor from variable vitamins
table(cereals$vitamins)
cereals$vitC <- factor(cereals$vitamins, levels=c(0,25,100))
# create a ggplot object which will serve as the basis
# for a scatter plot of fiber vs potass
bs=ggplot(cereals, aes(x=fiber,y=potass))+ggtitle("Fiber vs Potassium")
bs
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("GGally")
install.packages(c("Amelia", "factoextra"))
source('D:/Universidad/EIT/UPM/Primer semestre/Statistical Data Analysis/Labs/Lab 1/Lab#1b.R')
source('D:/Universidad/EIT/UPM/Primer semestre/Statistical Data Analysis/Labs/Lab 1/Lab#1b.R')
source('D:/Universidad/EIT/UPM/Primer semestre/Statistical Data Analysis/Labs/Lab 1/Lab#1b.R')
source('D:/Universidad/EIT/UPM/Primer semestre/Statistical Data Analysis/Labs/Lab 1/Lab#1b.R')
list.files()
cd
list.files()
a <- c(4, 4, 8)
b <- c(2, 1)
c <- a + b
c
# Store information about an applicant to a job position
applicant <- list(
degree = "Informatics",
languages = c("R", "JavaScript", "Python"),
interests = c("Healthcare", "Data Science")
)
applicant$languages
applicant[["languages"]]
applicant["languages"]
var_of_interest <- "languages"
applicant[[var_of_interest]]
grades <- list(
exam_1 = c(100, 94, 93),
exam_2 = c(88, 91, 98)
)
grades <- list(
exam_1 = c(100, 94, 93),
exam_2 = c(88, 91, 98)
)
lapply(grades, min())
min(grades)
lapply(grades, min)
lapply("grades", "min")
lapply(min, grades)
# A vector of student names
student_names <- c("Nate", "Ani", "Jeremy", "Daria")
# A vector of student grades (that correspond to the names above based on their position)
student_grades <- c(82, 74, 91, 92)
student_names[student_grades > 82]
prices <- c(9, 44, 2, 3, 5)
prices[prices < 5] <- 5
prices
#Load the data
movies <- get(load("movies.RData"))
carData
library(carData)
carData
x <- carData::Florida
head(x)
x[x$GORE > x$BUSH]
x$GORE > x$BUSH
x[[x$GORE > x$BUSH]]
x$NADER[[x$GORE > x$BUSH]]
x$NADER[x$GORE > x$BUSH]
sum(x$NADER[x$GORE > x$BUSH])
nrow(Florida[Florida$GORE > Florida$BUSH,])
nrow(Florida[,Florida$GORE > Florida$BUSH])
rownames(Florida[Florida$Total == max(Florida$Total),])
rownames(Florida$Total[Florida$Total == max(Florida$Total),])
nrow(Florida[Florida$GORE > Florida$BUSH,])
rownames(Florida$Total[Florida$Total == max(Florida$Total),])
rownames(Florida[Florida$Total == max(Florida$Total),])
setwd("D:/Universidad/EIT/UPM/Primer semestre/Statistical Data Analysis/SDA_HW_2019")
library(ggplot2)
data <- get(load("Homework 1.1/movies.RData"))
data <- get(load("Homework 1.1\movies.RData"))
data <- get(load("Homework 1.1\\movies.RData"))
data <- get(load("Homework 1.1//movies.RData"))
setwd("D:/Universidad/EIT/UPM/Primer semestre/Statistical Data Analysis/SDA_HW_2019/Homework 1.1")
data <- get(load("movies.RData"))
head(data)
as.Date("1996-12-23")
as.Date("1996-13-23")
as.Date("1996-13-1")
as.Date("1996-12-23")
movies$year[0]
movies$year[1]
movies$year[[0]]
movies$year
movies
data <- get(load("movies.RData"))
head(data)
type(movies)
summary(movies)
movies$thtr_rel_year[0]
movies$thtr_rel_year[[0]]
movies$thtr_rel_year[0]
movies$thtr_rel_year[1]
movies$thtr_rel_year[2]
movies$thtr_rel_year[1]+movies$thtr_rel_month[1]
movies$thtr_rel_month[2]
movies$thtr_rel_month[1]
str(100)
paste0("(", movies$thtr_rel_year, "-", movies$thtr_rel_month, ")")
paste0("(", movies$thtr_rel_year[1], "-", movies$thtr_rel_month[1], ")")
paste0(movies$thtr_rel_year[1], "-", movies$thtr_rel_month[1])
paste0(movies$thtr_rel_year[1], "-", movies$thtr_rel_month[1] + "-", movies$thtr_rel_day[1])
paste0(movies$thtr_rel_year[1], "-", movies$thtr_rel_month[1], "-", movies$thtr_rel_day[1])
as.Date(paste0(movies$thtr_rel_year[1], "-", movies$thtr_rel_month[1], "-", movies$thtr_rel_day[1]))
as.Date(paste0(movies$thtr_rel_year, "-", movies$thtr_rel_month, "-", movies$thtr_rel_day))
movies$thtr_rel_date
> Lets remove columns and add them up!
```{r}
movies$thtr_rel_date <- as.Date(paste0(movies$thtr_rel_year, "-", movies$thtr_rel_month, "-", movies$thtr_rel_day))
```
movies$thtr_rel_date <- as.Date(paste0(movies$thtr_rel_year, "-", movies$thtr_rel_month, "-", movies$thtr_rel_day))
movies$thtr_rel_date
library(ggplot2)
data <- get(load("movies.RData"))
head(data)
data[!complete.cases(data['runtime']),]
data$runtime[data$title == "The End of America"] <- 74
data[!complete.cases(data['director']),]
data$director[data$title == "Lorenzo's Oil"] <- "George Miller"
data$director[data$title == "The Ninth Gate"] <- "Roman Polanski"
data[!complete.cases(data["studio"]),]
data[!complete.cases(data["dvd_rel_year"]),]
data[!complete.cases(data["actor5"]),]
movies <- get(load("movies.RData"))
head(movies)
movies[!complete.cases(movies['runtime']),]
movies$runtime[movies$title == "The End of America"] <- 74
movies[!complete.cases(movies['director']),]
movies$director[movies$title == "Lorenzo's Oil"] <- "George Miller"
movies$director[movies$title == "The Ninth Gate"] <- "Roman Polanski"
movies[!complete.cases(movies["studio"]),]
movies[!complete.cases(movies["dvd_rel_year"]),]
movies[!complete.cases(movies["actor5"]),]
movies$thtr_rel_date <- as.Date(paste0(movies$thtr_rel_year, "-", movies$thtr_rel_month, "-", movies$thtr_rel_day))
movies$thtr_rel_date <- as.Date(paste0(movies$thtr_rel_year, "-", movies$thtr_rel_month, "-", movies$thtr_rel_day))
movies$dvd_rel_date <- as.Date(paste0(movies$dvd_rel_year, "-", movies$dvd_rel_month, "-", movies$dvd_rel_day))
movies$dvd_rel_day <- NULL
movies$dvd_rel_month <- NULL
movies$dvd_rel_year <- NULL
movies$thtr_rel_day <- NULL
movies$thtr_rel_month <- NULL
movies$thtr_rel_year <- NULL
movies$imdb_url <- NULL
movies$rt_url <- NULL
head(movies)
hist(movies$audience_score)
ggplot(movies, aes(x=audience_score)) + geom_histogram()
ggplot(movies, aes(x=critics_score)) + geom_histogram()
ggplot(movies, aes(x=imdb_rating)) + geom_histogram()
ggplot(movies, aes(x=thtr_rel_year)) + geom_histogram()
hist(movies$audience_score)
ggplot(movies, aes(x=audience_score)) + geom_histogram()
ggplot(movies, aes(x=critics_score)) + geom_histogram()
ggplot(movies, aes(x=imdb_rating)) + geom_histogram()
ggplot(movies, aes(x=thtr_rel_date)) + geom_histogram()
ggplot(movies, aes(x=imdb_num_votes)) + geom_histogram()
ggplot(movies, aes(x=log10(imdb_num_votes))) + geom_histogram()
ggplot(aes(x=forcats::fct_infreq(title_type)), data=movies) + geom_bar()
ggplot(aes(x=forcats::fct_infreq(genre)), data=movies) + geom_bar()
ggplot(aes(x=forcats::fct_infreq(mpaa_rating)), data=movies) + geom_bar()
ggplot(aes(x=forcats::fct_infreq(critics_rating)), data=movies) + geom_bar()
ggplot(aes(x=forcats::fct_infreq(audience_rating)), data=movies) + geom_bar()
ggplot(data=movies, aes(x=audience_score, y=critics_score)) + geom_point() + geom_smooth(method='lm')
ggplot(data=movies, aes(x=audience_score, y=imdb_rating)) + geom_point() + geom_smooth(method='lm')
ggplot(data=movies, aes(x=audience_score, y=critics_score)) + geom_point() + geom_smooth(method='lm')
ggplot(data=movies, aes(x=audience_score, y=imdb_rating)) + geom_point() + geom_smooth(method='lm')
ggplot(data=movies, aes(x=critics_score, y=imdb_rating)) + geom_point() + geom_smooth(method='lm')
ggplot(data=movies, aes(x=audience_score, y=critics_score)) + geom_point(aes(col=title_type), size=3) + geom_smooth(method='lm')
ggplot(data=movies, aes(x=audience_score, y=critics_score)) + geom_point(aes(col=genre), size=3) + geom_smooth(method='lm')
ggplot(data=subset(movies, genre == "Action & Adventure"), aes(x=audience_score, y=critics_score)) + geom_point(aes(col=title_type), size=3) + geom_smooth(method='lm')
ggplot(data=subset(movies, genre == "Animation"), aes(x=audience_score, y=critics_score)) + geom_point(aes(col=title_type), size=3) + geom_smooth(method='lm')
ggplot(data=subset(movies, genre == "Art House & International"), aes(x=audience_score, y=critics_score)) + geom_point(aes(col=title_type), size=3) + geom_smooth(method='lm')
ggplot(data=subset(movies, genre == "Comedy"), aes(x=audience_score, y=critics_score)) + geom_point(aes(col=title_type), size=3) + geom_smooth(method='lm')
ggplot(data=subset(movies, genre == "Documentary"), aes(x=audience_score, y=critics_score)) + geom_point(aes(col=title_type), size=3) + geom_smooth(method='lm')
ggplot(data=subset(movies, genre == "Drama"), aes(x=audience_score, y=critics_score)) + geom_point(aes(col=title_type), size=3) + geom_smooth(method='lm')
ggplot(data=subset(movies, genre == "Horror"), aes(x=audience_score, y=critics_score)) + geom_point(aes(col=title_type), size=3) + geom_smooth(method='lm')
ggplot(data=subset(movies, genre == "Musical & Performing Arts"), aes(x=audience_score, y=critics_score)) + geom_point(aes(col=title_type), size=3) + geom_smooth(method='lm')
ggplot(data=subset(movies, genre == "Mystery & Suspense"), aes(x=audience_score, y=critics_score)) + geom_point(aes(col=title_type), size=3) + geom_smooth(method='lm')
ggplot(data=subset(movies, genre == "Other"), aes(x=audience_score, y=critics_score)) + geom_point(aes(col=title_type), size=3) + geom_smooth(method='lm')
ggplot(data=subset(movies, genre == "Science Fiction & Fantasy"), aes(x=audience_score, y=critics_score)) + geom_point(aes(col=title_type), size=3) + geom_smooth(method='lm')
nrow(movies[movies$best_pic_win == "yes" | movies$best_actor_win == "yes" | movies$best_actress_win == "yes" | movies$best_dir_win == "yes",])
nrow(movies)
ggplot(data=movies[movies$best_pic_win == "yes" | movies$best_actor_win == "yes" | movies$best_actress_win == "yes" | movies$best_dir_win == "yes",],
aes(x=audience_score, y=critics_score)) + geom_point() + geom_smooth(method='lm')
ggplot(data=movies, aes(x=audience_score, y=critics_score)) + geom_point() + geom_smooth(method='lm')
